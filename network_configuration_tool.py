# assignment2.py"""Assignment 2 - Network Configuration ToolThis script provides :- Validate an IP address- Change network configuration (static or dhcp)- Backup network config files- Test connectivity using pingAll functionality should be implemented using Python standard libraries only."""import argparseimport osimport shutilimport subprocess# ----------------------------# Function 1: Validate IP Address# ----------------------------def validate_ip(ip, subnet):    """    Checks if the given IP address is valid (IPv4).        Arguments:        ip (str): The IP address to validate.        Returns:        bool: True if valid, False otherwise.    """    parts = ip.split(".")                                                   # Split IP by dots into 4 parts    if len(parts) != 4:                                                     # Check if there are exactly 4 parts        print("Oops! IP address must have 4 numbers separated by dots.")           return False    for part in parts:                                                      # Loop through each part        if not part.isdigit():            print(f"Oops! '{part}' is not a number.")                       # Check if part is a number            return False        if part.startswith("0") and len(part) > 1:                          # Rejecting leading zeros (e.g., '01)            print(f"Oops! '{part}' should not have leading zeros.")            return False        number = int(part)                                                  # Convert part to integer        if number < 0 or number > 255:                                      # Check range 0-255            print(f"Oops! {number} is out of range (0â€“255).")            return False    # Validate subnet if provided    try:        subnet_int = int(subnet)        if subnet_int < 0 or subnet_int > 32:            print("Oops! Subnet mask must be between 0 and 32.")            return False    except (ValueError, TypeError):        print("Oops! Subnet mask must be an integer.")        return False        print(f"Great! {ip}/{subnet} is a valid IPv4 address with subnet.")    return True